@using Project1024.Shared.Models;
@inject IJSRuntime JS
@implements IAsyncDisposable

<div class="@Class" style="position: relative; border-radius: 12px; @Style">
    @if (Show)
    {
        <video @ref="_video"
               oncontextmenu="return false;"
               style="width: 100%; height: 100%; min-width: 0"
               src="@Video?.VideoUrl"
               preload="auto"
               playsinline
               autoplay="@AutoPlay"
               loop
               controls
               controlslist="nodownload noremoteplayback">
        </video>
        <div style="position: absolute; left: 32px; bottom: 96px">
            <div class="text--primary text-h5">@@@Video?.Title</div>
            <div class="text--secondary text-subtitle-1">@Video?.Title</div>
        </div>
        <div class="d-flex flex-column align-center" style="position: absolute; right: 32px; bottom: 96px">
            <MButton Icon Fab OnClick="OnLikeClicked">
                 <MIcon>mdi-heart</MIcon>
             </MButton>
             803
             <MButton Icon Fab OnClick="OnCommentClicked">
                 <MIcon>mdi-comment-multiple</MIcon>
             </MButton>
             77
             <MButton Icon Fab OnClick="OnCollectClicked">
                 <MIcon>mdi-star</MIcon>
             </MButton>
             380
             <MButton Icon Fab OnClick="OnShareClicked">
                 <MIcon>mdi-share</MIcon>
             </MButton>
             123
         </div>
    }
</div>

@code {
    private ElementReference _video;
    private IJSObjectReference? _jsVideo;

    [Parameter]
    public string Class { get; set; } = "";

    [Parameter]
    public string Style { get; set; } = "";

    [Parameter]
    public bool Show { get; set; } = true;

    [Parameter]
    public bool AutoPlay { get; set; }

    [Parameter]
    public bool Play { get; set; }

    [Parameter]
    public VideoDto? Video { get; set; }

    public async ValueTask DisposeAsync()
    {
        await DisposeAsyncCore().ConfigureAwait(false);
        GC.SuppressFinalize(this);
    }

    protected virtual async ValueTask DisposeAsyncCore()
    {
        if (_jsVideo is not null)
        {
            await _jsVideo.DisposeAsync().ConfigureAwait(false);
        }
        _jsVideo = null;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_jsVideo is not null)
        {
            await _jsVideo.InvokeVoidAsync(Play ? "play" : "pause");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _jsVideo = Show ? await JS.InvokeAsync<IJSObjectReference>("eval", _video) : null;
    }

    private void OnLikeClicked()
    {
    }

    private void OnCommentClicked()
    {
        // TODO: Implement the logic for showing or hiding the comment section
    }

    private void OnCollectClicked()
    {
        // TODO: Implement the logic for adding or removing the video from the collection
    }

    private void OnShareClicked()
    {
        // TODO: Implement the logic for sharing the video to other platforms
    }
}
