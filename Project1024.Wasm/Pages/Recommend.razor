@page "/"
@page "/Recommend"
@using Project1024.Shared.Models;
@using Project1024.Shared.Services;
@inject IVideoService VideoService

<div class="d-flex" style="position:absolute; height: 100%; width: 100%">
    <SwiperContainer @ref="_swiper"
                     IndexChanged="OnIndexChanged"
                     class="flex-grow-1"
                     direction="vertical"
                     mousewheel="true"
                     keyboard="true"
                     focusable-elements="button"
                     no-swiping-selector=".m-btn">
        @for (int i = 0; i < _videos.Count; i++)
        {
            int idx = i;
            bool show = idx >= _index - 1 && idx <= _index + 1;
            bool autoPlay = idx == _index;
            <SwiperSlide @key="_videos[idx].Id" class="pa-2" style="box-sizing: border-box">
                <VideoPlayer @ref="_players[idx]" Video="_videos[idx]" Show="show" AutoPlay="autoPlay" Style="width: 100%; height: 100%" />
            </SwiperSlide>
        }
    </SwiperContainer>
    <div class="d-flex flex-column justify-center pa-2">
        <MButton Fab Class="mb-1" Disabled="_index == 0" OnClick="() => _swiper.SlidePrevAsync()">
             <MIcon>mdi-chevron-up</MIcon>
         </MButton>
         <MButton Fab Class="mt-1" Disabled="_index == _players.Count - 1" OnClick="() => _swiper.SlideNextAsync()">
             <MIcon>mdi-chevron-down</MIcon>
         </MButton>
     </div>
 </div>

 @code {
    private int _index = 0;
    private SwiperContainer _swiper = null!;
    private List<VideoPlayer> _players = null!;
    private List<VideoDto> _videos = null!;

    protected async override Task OnInitializedAsync()
    {
        _videos = await VideoService.GetVideosAsync(0, 5) ?? new();
        _players = new(_videos?.Count ?? 0);
        for (int i = 0; i < _videos?.Count; i++)
        {
            _players.Add(null!);
        }
    }

    private async Task OnIndexChanged(int index)
    {
        await _players[index].PlayAsync();
        if (index > _index)
        {
            await _players[index - 1].PauseAsync();
        }
        else if (index < _index)
        {
            await _players[index + 1].PauseAsync();
        }
        _index = index;
    }
 }